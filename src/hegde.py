# -*- coding: utf-8 -*-
"""datamining1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10AqMfnid-TisOGelets0y3V5sE3yVI-j
"""

import sys
import pandas as pd
import numpy as np

def run_script(cgm_data_file_path,insulin_data_file_path):
  """
    Function To Perform the task
  """
  pd.set_option('mode.chained_assignment', None)
  cgm_col_list = ['Index','Date','Time','Sensor Glucose (mg/dL)']
  cgm_data = pd.read_csv(cgm_data_file_path,usecols=cgm_col_list) 
  cgm_data['TimeStamp'] = pd.to_datetime(cgm_data['Date'] + ' ' + cgm_data['Time'])
  cgm_data['CGM'] = cgm_data['Sensor Glucose (mg/dL)']
  cgm_data = cgm_data[['Index','TimeStamp','CGM','Date','Time']]
  cgm_data = cgm_data.replace('',np.nan)
  cgm_data = cgm_data.replace('NaN',np.nan)
  cgm_data = cgm_data.interpolate(columns = 'CGM')

  ins_col_list = ['Index','Date','Time','Alarm']
  ins_data = pd.read_csv(insulin_data_file_path,usecols = ins_col_list) 
  ins_data['TimeStamp'] = pd.to_datetime(ins_data['Date'] + ' ' + ins_data['Time'])
  ins_data = ins_data[['Index','TimeStamp','Alarm']]

  auto_mode_msg = 'AUTO MODE ACTIVE PLGM OFF'
  auto_mode_time_ins = ins_data[ins_data['Alarm'] == auto_mode_msg]
  auto_mode_time_ins = auto_mode_time_ins[auto_mode_time_ins['TimeStamp']==min(auto_mode_time_ins['TimeStamp'])]
  auto_mode_time_ins = auto_mode_time_ins.iloc[0]['TimeStamp']
  auto_mode_time_cgm = cgm_data[cgm_data['TimeStamp']>auto_mode_time_ins]
  auto_mode_time_cgm = min(auto_mode_time_cgm['TimeStamp'])
  cgm_data_manual = cgm_data[cgm_data['TimeStamp']<auto_mode_time_cgm]
  cgm_data_auto = cgm_data[cgm_data['TimeStamp']>=auto_mode_time_cgm]
  manual_dates = cgm_data_manual['Date'].unique()
  auto_dates = cgm_data_auto['Date'].unique()
  results = np.zeros((2,18))
  results[0] = get_results(cgm_data_manual,manual_dates)
  results[1] = get_results(cgm_data_auto,auto_dates)
  results*=100
  results = np.around(results,decimals=2)
  ranges = ['Percentage time in hyperglycemia (CGM > 180 mg/dL)',
            'percentage of time in hyperglycemia critical (CGM > 250 mg/dL)',
            'percentage time in range (CGM >= 70 mg/dL and CGM <= 180 mg/dL)',
            'percentage time in range secondary (CGM >= 70 mg/dL and CGM <= 150 mg/dL)',
            'percentage time in hypoglycemia level 1 (CGM < 70 mg/dL)',
            'percentage time in hypoglycemia level 2 (CGM < 54 mg/dL)']
  timeFrames = ['Daytime','Overnight','Wholeday']
  columns = []
  for timeFrame in timeFrames:
    for range in ranges:
      columns.append(range + '-' + timeFrame)
  index = ['Manual Mode','Auto Mode']
  pd.DataFrame(results,columns=columns,index=index).to_csv('./Results.csv')

def extractCases(df,sample_count):
  """
    Helper Function to extract the cases from the given dataframe
  """

  if(sample_count==0):
    return np.zeros(6)
  class1 = len(df[df['CGM']>180].index)/sample_count
  class2 = len(df[df['CGM']>250].index)/sample_count
  class3 = len(df[(df['CGM']>=70) & (df['CGM']<=180)].index)/sample_count
  class4 = len(df[(df['CGM']>=70) & (df['CGM']<=150)].index)/sample_count
  class5 = len(df[df['CGM']<70].index)/sample_count
  class6 = len(df[df['CGM']<54].index)/sample_count
  res = np.array([class1,class2,class3,class4,class5,class6])
  return res
  
def get_results(df,dates):
  """
    Function to generate the results for the given dataframe and 
    the collection of dates
  """

  data_list = []
  for date in dates:
    data_per_day = {}
    timeStampMidNight = pd.Timestamp(date)
    timeStampMorning = pd.Timestamp(date + ' ' + '06:00:00')
    wholeday= df[df['Date']==date]
    overnight = wholeday[wholeday['TimeStamp']<timeStampMorning]
    daytime = wholeday[wholeday['TimeStamp']>=timeStampMorning]
    data_per_day['wholeday'] = wholeday
    data_per_day['overnight'] = overnight
    data_per_day['daytime'] = daytime
    data_list.append(data_per_day)

  res = np.zeros(18)
  for data in data_list:
    sample_count = len(data['wholeday'])
    res[:6]+=extractCases(data['daytime'],sample_count)
    res[6:12]+=extractCases(data['overnight'],sample_count)
    res[12:18]+=extractCases(data['wholeday'],sample_count)
  res/=len(data_list)
  return res

if __name__ == '__main__':
    run_script(sys.argv[1],sys.argv[2])